[
  {
    "objectID": "posts/2025-04-23 gfatools for Graphical Fragment Assembly files/index.html",
    "href": "posts/2025-04-23 gfatools for Graphical Fragment Assembly files/index.html",
    "title": "gfatools for GFA (graphical fragment assembly) files",
    "section": "",
    "text": "GFA (Graphical Fragment Assembly) format is used for sequence assembly graphs. It was proposed by Prof. Dr. Heng Li in 2014. Here is his proposal: https://lh3.github.io/2014/07/19/a-proposal-of-the-grapical-fragment-assembly-format.\nHe updated this format in past 10 years to make it better. Here is his description about rGFA format: http://www.liheng.org/downloads/rGFA-GAF.pdf. Another one is https://github.com/lh3/gfatools/blob/master/doc/rGFA.md.\nShortly, GFA format is like SAM format, which is also developed by him. (I really like his work, that helped the academia a lot).\n\nGFA is a simple TAB-dellimited text format consisting of 12 mandatory fields to represent reads aligned to a reference pan-genome graph: • Col 1–4: query name, length, start and end positions. • Col 5: the query strand relative to the mapping path in col 6. • Col 6: a stable graph path in the format matching the regular expression /([&gt;&lt;][^\\s&gt;&lt;]+:\\d+- \\d+)+|([^\\s&gt;&lt;]+)/. The less or greater sign indicates the orientation of the segment. If a path consists of a single segment, coordinates can be omitted and its orientation is assumed to be forward “&gt;”. • Col 7–9: total path length, start and end mapping positions on the forward strand of the path. • Col 10–12: number of matching bases, alignment block length and mapping quality\nEach line may have tags as in the SAM format. CIGARs are stored in tags\n\nSince the GFA format is so similar to SAM and PAF formats. I could use the R script that I wrote before to read and check those files. It may be better to use rust. I still need time to learn it."
  },
  {
    "objectID": "posts/2025-04-23 gfatools for Graphical Fragment Assembly files/index.html#basic-information",
    "href": "posts/2025-04-23 gfatools for Graphical Fragment Assembly files/index.html#basic-information",
    "title": "gfatools for GFA (graphical fragment assembly) files",
    "section": "",
    "text": "GFA (Graphical Fragment Assembly) format is used for sequence assembly graphs. It was proposed by Prof. Dr. Heng Li in 2014. Here is his proposal: https://lh3.github.io/2014/07/19/a-proposal-of-the-grapical-fragment-assembly-format.\nHe updated this format in past 10 years to make it better. Here is his description about rGFA format: http://www.liheng.org/downloads/rGFA-GAF.pdf. Another one is https://github.com/lh3/gfatools/blob/master/doc/rGFA.md.\nShortly, GFA format is like SAM format, which is also developed by him. (I really like his work, that helped the academia a lot).\n\nGFA is a simple TAB-dellimited text format consisting of 12 mandatory fields to represent reads aligned to a reference pan-genome graph: • Col 1–4: query name, length, start and end positions. • Col 5: the query strand relative to the mapping path in col 6. • Col 6: a stable graph path in the format matching the regular expression /([&gt;&lt;][^\\s&gt;&lt;]+:\\d+- \\d+)+|([^\\s&gt;&lt;]+)/. The less or greater sign indicates the orientation of the segment. If a path consists of a single segment, coordinates can be omitted and its orientation is assumed to be forward “&gt;”. • Col 7–9: total path length, start and end mapping positions on the forward strand of the path. • Col 10–12: number of matching bases, alignment block length and mapping quality\nEach line may have tags as in the SAM format. CIGARs are stored in tags\n\nSince the GFA format is so similar to SAM and PAF formats. I could use the R script that I wrote before to read and check those files. It may be better to use rust. I still need time to learn it."
  },
  {
    "objectID": "posts/2025-04-23 gfatools for Graphical Fragment Assembly files/index.html#installation",
    "href": "posts/2025-04-23 gfatools for Graphical Fragment Assembly files/index.html#installation",
    "title": "gfatools for GFA (graphical fragment assembly) files",
    "section": "Installation",
    "text": "Installation\n\ngit clone https://github.com/lh3/gfatools\ncd gfatools\nmake\nsudo cp gfatools /usr/local/bin/gfatools"
  },
  {
    "objectID": "posts/2025-04-23 gfatools for Graphical Fragment Assembly files/index.html#usage",
    "href": "posts/2025-04-23 gfatools for Graphical Fragment Assembly files/index.html#usage",
    "title": "gfatools for GFA (graphical fragment assembly) files",
    "section": "Usage",
    "text": "Usage\n\nUsage: gfatools &lt;command&gt; &lt;arguments&gt;\nCommands:\n  view        read a GFA file\n  stat        statistics about a GFA file\n  gfa2fa      convert GFA to FASTA\n  gfa2bed     convert rGFA to BED (requiring rGFA)\n  blacklist   blacklist regions\n  bubble      print bubble-like regions (EXPERIMENTAL)\n  asm         miniasm-like graph transformation\n  sql         export rGFA to SQLite (requiring rGFA)\n  ed          GWFA prefix alignment (for evaluation only)\n  version     print version number\n\nThe most recent commit is https://github.com/lh3/gfatools/commit/c31be8a62efc6bdea4576029f7fbe84f345a6eed."
  },
  {
    "objectID": "posts/2025-04-15 Folder Git Push/index.html",
    "href": "posts/2025-04-15 Folder Git Push/index.html",
    "title": "Git Push every repo in a folder",
    "section": "",
    "text": "When working with multiple Git repositories inside a single parent folder, it can be tedious to git pull or git push each one individually. This guide shows you how to automate these tasks using simple shell scripts."
  },
  {
    "objectID": "posts/2025-04-15 Folder Git Push/index.html#introduction",
    "href": "posts/2025-04-15 Folder Git Push/index.html#introduction",
    "title": "Git Push every repo in a folder",
    "section": "",
    "text": "When working with multiple Git repositories inside a single parent folder, it can be tedious to git pull or git push each one individually. This guide shows you how to automate these tasks using simple shell scripts."
  },
  {
    "objectID": "posts/2025-04-15 Folder Git Push/index.html#prerequisites",
    "href": "posts/2025-04-15 Folder Git Push/index.html#prerequisites",
    "title": "Git Push every repo in a folder",
    "section": "Prerequisites",
    "text": "Prerequisites\n\nA Unix-like shell (Linux/macOS or Git Bash on Windows)\nGit installed and configured\nAll subdirectories must be Git repositories (i.e., each one has a .git folder)"
  },
  {
    "objectID": "posts/2025-04-15 Folder Git Push/index.html#step-1-batch-git-pull-for-all-repositories",
    "href": "posts/2025-04-15 Folder Git Push/index.html#step-1-batch-git-pull-for-all-repositories",
    "title": "Git Push every repo in a folder",
    "section": "Step 1: Batch git pull for All Repositories",
    "text": "Step 1: Batch git pull for All Repositories\nCreate a shell script named pull_all.sh:\n\n# Loop through all subdirectories\nfor dir in */; do\n  if [ -d \"$dir/.git\" ]; then\n    echo \"Pulling in $dir\"\n    cd \"$dir\"\n    git pull\n    cd ..\n  fi\ndone"
  },
  {
    "objectID": "posts/2025-04-15 Folder Git Push/index.html#step-2-batch-git-push-for-all-repositories",
    "href": "posts/2025-04-15 Folder Git Push/index.html#step-2-batch-git-push-for-all-repositories",
    "title": "Git Push every repo in a folder",
    "section": "Step 2: Batch git push for All Repositories",
    "text": "Step 2: Batch git push for All Repositories\nSimilarly, create a script called push_all.sh:\n\n# Loop through all subdirectories\nfor dir in */; do\n  if [ -d \"$dir/.git\" ]; then\n    echo \"Pushing in $dir\"\n    cd \"$dir\"\n    git add .\n    git commit -m \"Auto commit\"\n    git push\n    cd ..\n  fi\ndone"
  },
  {
    "objectID": "posts/2025-04-15 Folder Git Push/index.html#conclusion",
    "href": "posts/2025-04-15 Folder Git Push/index.html#conclusion",
    "title": "Git Push every repo in a folder",
    "section": "Conclusion",
    "text": "Conclusion\nWith just a few lines of scripting, you can easily manage multiple Git repositories at once. This method helps save time and reduces manual errors when updating multiple projects."
  },
  {
    "objectID": "posts/2025-04-14 Manhattan Plot/index.html",
    "href": "posts/2025-04-14 Manhattan Plot/index.html",
    "title": "Manhattan Plot for GWAS Results",
    "section": "",
    "text": "思问 & StatisticVision. (2025, March 14). R语言绘图25|Nature曼哈顿图复现 [微信公众号]. R语言绘图25|Nature曼哈顿图复现. https://mp.weixin.qq.com/s/3YlnB3Nm85v3FxE8F67oDw"
  },
  {
    "objectID": "posts/2025-04-14 Manhattan Plot/index.html#参考教程",
    "href": "posts/2025-04-14 Manhattan Plot/index.html#参考教程",
    "title": "Manhattan Plot for GWAS Results",
    "section": "",
    "text": "思问 & StatisticVision. (2025, March 14). R语言绘图25|Nature曼哈顿图复现 [微信公众号]. R语言绘图25|Nature曼哈顿图复现. https://mp.weixin.qq.com/s/3YlnB3Nm85v3FxE8F67oDw"
  },
  {
    "objectID": "posts/2025-04-14 Manhattan Plot/index.html#基本信息",
    "href": "posts/2025-04-14 Manhattan Plot/index.html#基本信息",
    "title": "Manhattan Plot for GWAS Results",
    "section": "基本信息",
    "text": "基本信息\n曼哈顿图（Manhattan Plot)是基因组范围内关联研究（GWAS）中常用的可视化工具，用于展示单核苷酸多态性（SNP）与表型之间的关联。它通过在x轴上绘制基因组位置，在y轴上绘制-log10(p-value)来显示每个SNP的显著性水平。"
  },
  {
    "objectID": "posts/2025-04-14 Manhattan Plot/index.html#曼哈顿图的特点",
    "href": "posts/2025-04-14 Manhattan Plot/index.html#曼哈顿图的特点",
    "title": "Manhattan Plot for GWAS Results",
    "section": "曼哈顿图的特点",
    "text": "曼哈顿图的特点\n\nX轴： 基因组的位置，按照染色体编号和物理位置排列，每条染色体用不同的颜色区分\nY轴：用-log10(p-value)表示SNPs的显著性水平，越高表示显著性水平越高\n阈值线：图中与X轴平行的一条线，表示不同的显著性水平，分别对应p-value的某些值，比如p&lt;5x10-8\n点: 每一个点表示一个SNPs，其高度表示显著性程度"
  },
  {
    "objectID": "posts/2025-04-14 Manhattan Plot/index.html#相关脚本",
    "href": "posts/2025-04-14 Manhattan Plot/index.html#相关脚本",
    "title": "Manhattan Plot for GWAS Results",
    "section": "相关脚本",
    "text": "相关脚本\n通过 Listing 1 加载了需要用到的的 R 包。\n\n\n\n\nListing 1: Load required packages\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\n\n\n\n生成模拟数据\n\nset.seed(42)\ndata &lt;- data.frame(\n  SNP=paste0(\"rs\",1:10000),\n  CHR=rep(1:22, length.out=10000),\n  BP=sample(1:1e6, 10000),\n  P=runif(10000)\n)\n\n\n\n\nFirst 6 rows of the demo data\n\n\nSNP\nCHR\nBP\nP\n\n\n\n\nrs1\n1\n61413\n0.4715924\n\n\nrs2\n2\n54425\n0.5765097\n\n\nrs3\n3\n623844\n0.2229165\n\n\nrs4\n4\n74362\n0.3966966\n\n\nrs5\n5\n46208\n0.3641330\n\n\nrs6\n6\n964632\n0.6577111\n\n\n\n\n\n计算-log10(p-value)\n\ndata &lt;- data %&gt;%\n  mutate(logP = -log10(P))\n\n\n\n\nFirst 6 rows of the demo data\n\n\nSNP\nCHR\nBP\nP\nlogP\n\n\n\n\nrs1\n1\n61413\n0.4715924\n0.3264332\n\n\nrs2\n2\n54425\n0.5765097\n0.2391934\n\n\nrs3\n3\n623844\n0.2229165\n0.6518579\n\n\nrs4\n4\n74362\n0.3966966\n0.4015415\n\n\nrs5\n5\n46208\n0.3641330\n0.4387400\n\n\nrs6\n6\n964632\n0.6577111\n0.1819648\n\n\n\n\n\n画图展示相关的数据\n\nggplot(data, aes(x=BP, y=logP, color=as.factor(CHR)))+ \n  geom_point(alpha = 0.6, size = 1)+ \n  facet_grid(. ~ CHR, scales = \"free_x\", space = \"free_x\")+ \n  geom_hline(yintercept = -log10(5e-8), linetype = \"dashed\", color = \"red\")+ \n  labs(title = \"Manhattan Plot\",\n       x = \"Chromosome\",\n       y = \"-log10(p-value)\",\n       color = \"Chromosomes\" ) + \n  theme_minimal() + \n  theme(strip.text.x = element_blank(), \n        panel.spacing.x = unit(0.1, \"lines\"), \n        axis.text.x = element_blank(), \n        legend.position = \"none\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\ngfatools for GFA (graphical fragment assembly) files\n\n\n\nAssembly\n\n\n\n\n\n\n\nJie Hua\n\n\nApr 23, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIllustrate: Non-photorealistic Biomolecular Illustration\n\n\n\nStructure\n\n\n\n\n\n\n\nJie Hua\n\n\nApr 16, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFamDB database download\n\n\n\nAnnotation\n\n\n\n\n\n\n\nJie Hua\n\n\nApr 15, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGit Push every repo in a folder\n\n\n\nBash\n\n\n\n\n\n\n\nJie Hua\n\n\nApr 15, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nManhattan Plot for GWAS Results\n\n\n\nPlot\n\n\n\n\n\n\n\nJie Hua\n\n\nApr 14, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDynamically adjust the process cores number\n\n\n\nBash\n\n\n\n\n\n\n\nJie Hua\n\n\nJan 1, 2025\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I am now a doctoral student in Biomedical center, LMU."
  },
  {
    "objectID": "posts/2025-01-01 Process Cores/index.html",
    "href": "posts/2025-01-01 Process Cores/index.html",
    "title": "Dynamically adjust the process cores number",
    "section": "",
    "text": "In high-performance computing or scripting environments, it’s often useful to dynamically adjust the number of threads used based on the time of day.\nFor example, during working hours, we might want to use fewer threads to avoid overwhelming shared systems, while at night, we can take full advantage of available resources.\nThis tutorial demonstrates how to use a simple Bash script to determine the current time and set the number of threads accordingly."
  },
  {
    "objectID": "posts/2025-01-01 Process Cores/index.html#introduction",
    "href": "posts/2025-01-01 Process Cores/index.html#introduction",
    "title": "Dynamically adjust the process cores number",
    "section": "",
    "text": "In high-performance computing or scripting environments, it’s often useful to dynamically adjust the number of threads used based on the time of day.\nFor example, during working hours, we might want to use fewer threads to avoid overwhelming shared systems, while at night, we can take full advantage of available resources.\nThis tutorial demonstrates how to use a simple Bash script to determine the current time and set the number of threads accordingly."
  },
  {
    "objectID": "posts/2025-01-01 Process Cores/index.html#bash-script",
    "href": "posts/2025-01-01 Process Cores/index.html#bash-script",
    "title": "Dynamically adjust the process cores number",
    "section": "Bash Script",
    "text": "Bash Script\nThe following script uses the date command to get the current hour and then sets the number of threads based on predefined rules:\n\n# Get the current hour in 24-hour format (00-23)\nhour=$(date +\"%H\")\n\n# Set thread number based on the time of day\nif [ \"$hour\" -ge 0 ] && [ \"$hour\" -lt 6 ]; then\n    threads=16  # Early morning: high resource usage allowed\nelif [ \"$hour\" -ge 6 ] && [ \"$hour\" -lt 12 ]; then\n    threads=8   # Morning: moderate usage\nelif [ \"$hour\" -ge 12 ] && [ \"$hour\" -lt 18 ]; then\n    threads=4   # Afternoon: light usage\nelse\n    threads=12  # Evening: high usage again\nfi\n\necho \"Current hour: $hour\"\necho \"Using $threads threads\""
  },
  {
    "objectID": "posts/2025-01-01 Process Cores/index.html#notes",
    "href": "posts/2025-01-01 Process Cores/index.html#notes",
    "title": "Dynamically adjust the process cores number",
    "section": "Notes",
    "text": "Notes\nYou can customize the thresholds and thread values based on your system and policy.\nThis logic can be easily embedded in SLURM job scripts or any shell-based pipeline."
  },
  {
    "objectID": "posts/2025-01-01 Process Cores/index.html#conclusion",
    "href": "posts/2025-01-01 Process Cores/index.html#conclusion",
    "title": "Dynamically adjust the process cores number",
    "section": "Conclusion",
    "text": "Conclusion\nThis simple method allows you to be resource-conscious and responsive to different usage patterns throughout the day. It’s a lightweight solution that works in any Unix-like environment."
  },
  {
    "objectID": "posts/2025-04-15 FamDB download/index.html",
    "href": "posts/2025-04-15 FamDB download/index.html",
    "title": "FamDB database download",
    "section": "",
    "text": "# 设置 URL 列表\nURLS=(\n\"https://www.dfam.org/releases/current/families/FamDB/dfam39_full.0.h5.gz\"\n\"https://www.dfam.org/releases/current/families/FamDB/dfam39_full.0.h5.gz.md5\"\n\"https://www.dfam.org/releases/current/families/FamDB/dfam39_full.1.h5.gz\"\n\"https://www.dfam.org/releases/current/families/FamDB/dfam39_full.1.h5.gz.md5\"\n\"https://www.dfam.org/releases/current/families/FamDB/dfam39_full.7.h5.gz\"\n\"https://www.dfam.org/releases/current/families/FamDB/dfam39_full.7.h5.gz.md5\"\n)\n\n# 使用 aria2c 多线程下载\nfor url in \"${URLS[@]}\"; do\n    echo \"Downloading $url ...\"\n    aria2c -x 16 -s 16 -k 1M \"$url\"\ndone\n# 校验 MD5\nfor file in *.gz; do\n    echo \"Checking MD5 for $file ...\"\n    md5file=\"${file}.md5\"\n    if [ -f \"$md5file\" ]; then\n        # 格式转换为标准 md5sum 可读格式\n        hash=$(cut -d ' ' -f 1 \"$md5file\")\n        echo \"$hash  $file\" &gt; check.md5\n        md5sum -c check.md5\n        if [ $? -ne 0 ]; then\n            echo \"❌ MD5 check failed for $file\"\n            exit 1\n        else\n            echo \"✅ MD5 check passed for $file\"\n        fi\n        rm check.md5\n    else\n        echo \"⚠️ Warning: MD5 file not found for $file\"\n    fi\ndone\n# 解压缩\nfor file in *.gz; do\n    echo \"Unzipping $file ...\"\n    gunzip -k \"$file\"\ndone\necho \"✅ All files downloaded, verified, and unzipped successfully.\""
  },
  {
    "objectID": "posts/2025-04-16 Cartoonize protein structure/index.html",
    "href": "posts/2025-04-16 Cartoonize protein structure/index.html",
    "title": "Illustrate: Non-photorealistic Biomolecular Illustration",
    "section": "",
    "text": "Illustrate is a small Fortran program for creating non-photorealistic illustrations of molecules, with cartoony colors and outlines, and soft ambient shadows. I originally developed it during postdoctoral training in the laboratory of Arthur J. Olson at the Scripps Research Institute, and have tinkered with it ever since. I have used it to create materials for my books and for PDB-101, the outreach portal of the RCSB Protein Data Bank, most notably, for the “Molecule of the Month.”\n\nOfficial website: https://ccsb.scripps.edu/illustrate/\nPublication: Goodsell, D. S., Autin, L., & Olson, A. J. (2019). Illustrate: Software for Biomolecular Illustration. Structure (London, England : 1993), 27(11), 1716–1720.e1. https://doi.org/10.1016/j.str.2019.08.011"
  }
]