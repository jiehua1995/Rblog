[
  {
    "objectID": "posts/2025-04-14 Manhattan Plot/index.html",
    "href": "posts/2025-04-14 Manhattan Plot/index.html",
    "title": "Manhattan Plot for GWAS Results",
    "section": "",
    "text": "思问 & StatisticVision. (2025, March 14). R语言绘图25|Nature曼哈顿图复现 [微信公众号]. R语言绘图25|Nature曼哈顿图复现. https://mp.weixin.qq.com/s/3YlnB3Nm85v3FxE8F67oDw"
  },
  {
    "objectID": "posts/2025-04-14 Manhattan Plot/index.html#参考教程",
    "href": "posts/2025-04-14 Manhattan Plot/index.html#参考教程",
    "title": "Manhattan Plot for GWAS Results",
    "section": "",
    "text": "思问 & StatisticVision. (2025, March 14). R语言绘图25|Nature曼哈顿图复现 [微信公众号]. R语言绘图25|Nature曼哈顿图复现. https://mp.weixin.qq.com/s/3YlnB3Nm85v3FxE8F67oDw"
  },
  {
    "objectID": "posts/2025-04-14 Manhattan Plot/index.html#基本信息",
    "href": "posts/2025-04-14 Manhattan Plot/index.html#基本信息",
    "title": "Manhattan Plot for GWAS Results",
    "section": "基本信息",
    "text": "基本信息\n曼哈顿图（Manhattan Plot)是基因组范围内关联研究（GWAS）中常用的可视化工具，用于展示单核苷酸多态性（SNP）与表型之间的关联。它通过在x轴上绘制基因组位置，在y轴上绘制-log10(p-value)来显示每个SNP的显著性水平。"
  },
  {
    "objectID": "posts/2025-04-14 Manhattan Plot/index.html#曼哈顿图的特点",
    "href": "posts/2025-04-14 Manhattan Plot/index.html#曼哈顿图的特点",
    "title": "Manhattan Plot for GWAS Results",
    "section": "曼哈顿图的特点",
    "text": "曼哈顿图的特点\n\nX轴： 基因组的位置，按照染色体编号和物理位置排列，每条染色体用不同的颜色区分\nY轴：用-log10(p-value)表示SNPs的显著性水平，越高表示显著性水平越高\n阈值线：图中与X轴平行的一条线，表示不同的显著性水平，分别对应p-value的某些值，比如p&lt;5x10-8\n点: 每一个点表示一个SNPs，其高度表示显著性程度"
  },
  {
    "objectID": "posts/2025-04-14 Manhattan Plot/index.html#相关脚本",
    "href": "posts/2025-04-14 Manhattan Plot/index.html#相关脚本",
    "title": "Manhattan Plot for GWAS Results",
    "section": "相关脚本",
    "text": "相关脚本\n通过 Listing 1 加载了需要用到的的 R 包。\n\n\n\n\nListing 1: Load required packages\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\n\n\n\n生成模拟数据\n\nset.seed(42)\ndata &lt;- data.frame(\n  SNP=paste0(\"rs\",1:10000),\n  CHR=rep(1:22, length.out=10000),\n  BP=sample(1:1e6, 10000),\n  P=runif(10000)\n)\n\n\n\n\nFirst 6 rows of the demo data\n\n\nSNP\nCHR\nBP\nP\n\n\n\n\nrs1\n1\n61413\n0.4715924\n\n\nrs2\n2\n54425\n0.5765097\n\n\nrs3\n3\n623844\n0.2229165\n\n\nrs4\n4\n74362\n0.3966966\n\n\nrs5\n5\n46208\n0.3641330\n\n\nrs6\n6\n964632\n0.6577111\n\n\n\n\n\n计算-log10(p-value)\n\ndata &lt;- data %&gt;%\n  mutate(logP = -log10(P))\n\n\n\n\nFirst 6 rows of the demo data\n\n\nSNP\nCHR\nBP\nP\nlogP\n\n\n\n\nrs1\n1\n61413\n0.4715924\n0.3264332\n\n\nrs2\n2\n54425\n0.5765097\n0.2391934\n\n\nrs3\n3\n623844\n0.2229165\n0.6518579\n\n\nrs4\n4\n74362\n0.3966966\n0.4015415\n\n\nrs5\n5\n46208\n0.3641330\n0.4387400\n\n\nrs6\n6\n964632\n0.6577111\n0.1819648\n\n\n\n\n\n画图展示相关的数据\n\nggplot(data, aes(x=BP, y=logP, color=as.factor(CHR)))+ \n  geom_point(alpha = 0.6, size = 1)+ \n  facet_grid(. ~ CHR, scales = \"free_x\", space = \"free_x\")+ \n  geom_hline(yintercept = -log10(5e-8), linetype = \"dashed\", color = \"red\")+ \n  labs(title = \"Manhattan Plot\",\n       x = \"Chromosome\",\n       y = \"-log10(p-value)\",\n       color = \"Chromosomes\" ) + \n  theme_minimal() + \n  theme(strip.text.x = element_blank(), \n        panel.spacing.x = unit(0.1, \"lines\"), \n        axis.text.x = element_blank(), \n        legend.position = \"none\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nManhattan Plot for GWAS Results\n\n\n\nPlot\n\n\n\n\n\n\n\nJie Hua\n\n\nApr 14, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDynamically adjust the process cores number\n\n\n\nBash\n\n\n\n\n\n\n\nJie Hua\n\n\nJan 1, 2025\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I am now a doctoral student in Biomedical center, LMU."
  },
  {
    "objectID": "posts/2025-01-01 Process Cores/index.html",
    "href": "posts/2025-01-01 Process Cores/index.html",
    "title": "Dynamically adjust the process cores number",
    "section": "",
    "text": "In high-performance computing or scripting environments, it’s often useful to dynamically adjust the number of threads used based on the time of day.\nFor example, during working hours, we might want to use fewer threads to avoid overwhelming shared systems, while at night, we can take full advantage of available resources.\nThis tutorial demonstrates how to use a simple Bash script to determine the current time and set the number of threads accordingly."
  },
  {
    "objectID": "posts/2025-01-01 Process Cores/index.html#introduction",
    "href": "posts/2025-01-01 Process Cores/index.html#introduction",
    "title": "Dynamically adjust the process cores number",
    "section": "",
    "text": "In high-performance computing or scripting environments, it’s often useful to dynamically adjust the number of threads used based on the time of day.\nFor example, during working hours, we might want to use fewer threads to avoid overwhelming shared systems, while at night, we can take full advantage of available resources.\nThis tutorial demonstrates how to use a simple Bash script to determine the current time and set the number of threads accordingly."
  },
  {
    "objectID": "posts/2025-01-01 Process Cores/index.html#bash-script",
    "href": "posts/2025-01-01 Process Cores/index.html#bash-script",
    "title": "Dynamically adjust the process cores number",
    "section": "Bash Script",
    "text": "Bash Script\nThe following script uses the date command to get the current hour and then sets the number of threads based on predefined rules:\n\n# Get the current hour in 24-hour format (00-23)\nhour=$(date +\"%H\")\n\n# Set thread number based on the time of day\nif [ \"$hour\" -ge 0 ] && [ \"$hour\" -lt 6 ]; then\n    threads=16  # Early morning: high resource usage allowed\nelif [ \"$hour\" -ge 6 ] && [ \"$hour\" -lt 12 ]; then\n    threads=8   # Morning: moderate usage\nelif [ \"$hour\" -ge 12 ] && [ \"$hour\" -lt 18 ]; then\n    threads=4   # Afternoon: light usage\nelse\n    threads=12  # Evening: high usage again\nfi\n\necho \"Current hour: $hour\"\necho \"Using $threads threads\""
  },
  {
    "objectID": "posts/2025-01-01 Process Cores/index.html#notes",
    "href": "posts/2025-01-01 Process Cores/index.html#notes",
    "title": "Dynamically adjust the process cores number",
    "section": "Notes",
    "text": "Notes\nYou can customize the thresholds and thread values based on your system and policy.\nThis logic can be easily embedded in SLURM job scripts or any shell-based pipeline."
  },
  {
    "objectID": "posts/2025-01-01 Process Cores/index.html#conclusion",
    "href": "posts/2025-01-01 Process Cores/index.html#conclusion",
    "title": "Dynamically adjust the process cores number",
    "section": "Conclusion",
    "text": "Conclusion\nThis simple method allows you to be resource-conscious and responsive to different usage patterns throughout the day. It’s a lightweight solution that works in any Unix-like environment."
  }
]