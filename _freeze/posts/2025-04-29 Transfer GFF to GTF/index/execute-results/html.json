{
  "hash": "67c1c3cfd624a286e21447aee712712f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Transfer GFF to GTF file\"\nauthor: \"Jie Hua\"\ndate: \"2025-04-29\"\ndate-modified: \"2025-04-29\"\ncategories: [Annotation]\nengine: knitr\nimage: \"gff_teaser.webp\"\n---\n\n\n\n\n## Basic Information\n\n> GFF3 (Generic Feature Format Version 3) file format represents the genomic features in a simple text-based tab-delimited file\n>\n> GFF3 file has nine fields (seqid, source, feature, start, end, score, strand, phase, and attributes)\n>\n> The lines which starts with ‘##’ provides the meta-information of the file and ‘#’ represents the human-readable comments\n\nWe sometimes need to transfer GFF3 to GTF format.\n\nI used [gffread](https://github.com/gpertea/gffread) before. It generally works well, but it has some problem when I need to deal with a GFF3 file downloaded from NCBI.\n\nThis file has some lines like:\n\n``` txt\nchrxxx\tGnomon\texon\t46964\t46999\t.\t-\t.\tID=id-LOC123327042;Parent=gene-LOC123327042;Dbxref=GeneID:123327042;gbkey=exon;gene=LOC123327042;model_evidence=Supporting evidence includes similarity to: 1 Protein%2C and 74%25 coverage of the annotated genomic feature by RNAseq alignments;pseudo=true\nchrxxx\tGnomon\texon\t47054\t47468\t.\t-\t.\tID=id-LOC123327042-2;Parent=gene-LOC123327042;Dbxref=GeneID:123327042;gbkey=exon;gene=LOC123327042;model_evidence=Supporting evidence includes similarity to: 1 Protein%2C and 74%25 coverage of the annotated genomic feature by RNAseq alignments;pseudo=true\nchrxxx\tGnomon\texon\t47542\t47661\t.\t-\t.\tID=id-LOC123327042-3;Parent=gene-LOC123327042;Dbxref=GeneID:123327042;gbkey=exon;gene=LOC123327042;model_evidence=Supporting evidence includes similarity to: 1 Protein%2C and 74%25 coverage of the annotated genomic feature by RNAseq alignments;pseudo=true\n```\n\nWhen I used [gffread](https://github.com/gpertea/gffread), it can not read there lines containing \"ID=id\\*\", it will lose the **gene_id** attribute in the output GTF file.\n\nI realized that I need to write a script by myself.\n\n## Script\n\n``` python\nimport sys\nimport uuid\nimport re\n\ndef parse_gff_attributes(attributes_str):\n    \"\"\"Parse GFF attributes into a dictionary.\"\"\"\n    attributes = {}\n    for attr in attributes_str.split(';'):\n        if attr:\n            key_value = attr.split('=', 1)\n            if len(key_value) == 2:\n                key, value = key_value\n                attributes[key] = value\n    return attributes\n\ndef convert_gff_to_gtf(gff_file, gtf_file):\n    \"\"\"Convert GFF3 to GTF format, retaining ID, gene_id, and transcript_id.\"\"\"\n    with open(gff_file, 'r') as gff, open(gtf_file, 'w') as gtf:\n        for line in gff:\n            if line.startswith('#'):\n                gtf.write(line)\n                continue\n            \n            fields = line.strip().split('\\t')\n            if len(fields) != 9:\n                continue\n                \n            seqid, source, feature, start, end, score, strand, phase, attributes_str = fields\n            attributes = parse_gff_attributes(attributes_str)\n            \n            # Skip features that are not relevant for GTF (e.g., region)\n            if feature not in ['gene', 'mRNA', 'exon', 'CDS', 'lnc_RNA', 'pseudogene']:\n                continue\n                \n            # Determine feature type for GTF\n            gtf_feature = feature\n            if feature == 'mRNA' or feature == 'lnc_RNA':\n                gtf_feature = 'transcript'\n            \n            # Extract required attributes\n            gene_id = attributes.get('gene', '')\n            transcript_id = attributes.get('transcript_id', '')\n            feature_id = attributes.get('ID', '')\n            \n            # Build GTF attributes string\n            gtf_attributes = []\n            if feature == 'gene':\n                gtf_attributes.append(f'gene_id \"{gene_id}\"')\n                if 'Name' in attributes:\n                    gtf_attributes.append(f'gene_name \"{attributes[\"Name\"]}\"')\n            elif feature in ['mRNA', 'lnc_RNA', 'exon', 'CDS']:\n                gtf_attributes.append(f'gene_id \"{gene_id}\"')\n                gtf_attributes.append(f'transcript_id \"{transcript_id}\"')\n                if 'Name' in attributes and feature in ['mRNA', 'lnc_RNA']:\n                    gtf_attributes.append(f'gene_name \"{attributes[\"Name\"]}\"')\n                if feature == 'exon':\n                    gtf_attributes.append(f'exon_id \"{feature_id}\"')\n            elif feature == 'pseudogene':\n                gtf_attributes.append(f'gene_id \"{gene_id}\"')\n                if 'Name' in attributes:\n                    gtf_attributes.append(f'gene_name \"{attributes[\"Name\"]}\"')\n            \n            # Write GTF line\n            gtf_fields = [seqid, source, gtf_feature, start, end, score, strand, phase, '; '.join(gtf_attributes)]\n            gtf.write('\\t'.join(gtf_fields) + '\\n')\n\nif __name__ == '__main__':\n    if len(sys.argv) != 3:\n        print(\"Usage: python gff_to_gtf.py input.gff output.gtf\")\n        sys.exit(1)\n    \n    gff_file = sys.argv[1]\n    gtf_file = sys.argv[2]\n    convert_gff_to_gtf(gff_file, gtf_file)\n    print(f\"Conversion complete. GTF file written to {gtf_file}\")\n```\n\n## Usage\n\nIt is very easy to use this script, just save it as *gff2gtf.py* and then run like\n\n``` bash\npython gff2gtf.py input.gff output.gtf\n```\n\nThe result looks like\n\n``` txt\nchrxxx      Gnomon  exon    46964   46999   .       -       .       gene_id \"LOC123327042\"; transcript_id \"\"; exon_id \"id-LOC123327042\"\nchrxxx      Gnomon  exon    47054   47468   .       -       .       gene_id \"LOC123327042\"; transcript_id \"\"; exon_id \"id-LOC123327042-2\"\nchrxxx       Gnomon  exon    47542   47661   .       -       .       gene_id \"LOC123327042\"; transcript_id \"\"; exon_id \"id-LOC123327042-3\"\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}